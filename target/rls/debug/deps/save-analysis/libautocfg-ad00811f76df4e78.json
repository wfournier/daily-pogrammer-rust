{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49],"program":"C:\\Users\\wfournier\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","autocfg","C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=ad00811f76df4e78","-C","extra-filename=-ad00811f76df4e78","--out-dir","c:\\Git\\daily-programmer-rust\\target\\rls\\debug\\deps","-L","dependency=c:\\Git\\daily-programmer-rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\wfournier\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":[99,58,92,71,105,116,92,100,97,105,108,121,45,112,114,111,103,114,97,109,109,101,114,45,114,117,115,116,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,97,117,116,111,99,102,103,45,97,100,48,48,56,49,49,102,55,54,100,102,52,101,55,56,46,114,108,105,98]},"prelude":{"crate_id":{"name":"autocfg","disambiguator":[14488215142382681848,1481459390041584993]},"crate_root":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src","external_crates":[{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3116732675919376778,4535091732021476028]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10198980024911631093,5083529421181457146]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1123322223734846952,17100323882940765749]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6264374463744980973,2766241073801268643]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2185040418832752576,14051225656765576969]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[11199082245097702914,8713712401289503363]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[13170944265936144608,1514158813285544784]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":8,"id":{"name":"unwind","disambiguator":[10491362580873413048,13869472258245269932]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[6460684058281241882,5666256007927889128]}},{"file_name":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[11769252009213783154,7432290129240058489]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8023,"line_start":1,"line_end":263,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1419,"byte_end":1424,"line_start":48,"line_end":48,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8023,"line_start":1,"line_end":263,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\wfournier\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":74},{"krate":0,"index":170},{"krate":0,"index":176},{"krate":0,"index":172},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":120}],"decl_id":null,"docs":" A Rust library for build scripts to automatically configure code based on\n compiler support.  Code snippets are dynamically tested to see if the `rustc`\n will accept them, rather than hard-coding specific version support.","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1197,"byte_end":1236,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1237,"byte_end":1259,"line_start":38,"line_end":38,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":8174,"byte_end":8179,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" A common error type for the `autocfg` crate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1597,"byte_end":1604,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"AutoCfg","qualname":"::AutoCfg","value":"AutoCfg {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" Helper to detect compiler features for `cfg` output in build scripts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1769,"byte_end":1773,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"emit","qualname":"::emit","value":"fn (cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a config flag for rustc on standard out.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1945,"byte_end":1948,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"new","qualname":"::new","value":"fn () -> AutoCfg","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2320,"byte_end":2323,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<AutoCfg>::new","value":"fn () -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2824,"byte_end":2832,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"with_dir","qualname":"<AutoCfg>::with_dir","value":"fn <T> (dir: T) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance with the specified output directory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3665,"byte_end":3684,"line_start":125,"line_end":125,"column_start":12,"column_end":31},"name":"probe_rustc_version","qualname":"<AutoCfg>::probe_rustc_version","value":"fn (&self, major: usize, minor: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the current `rustc` reports a version greater than\n or equal to \"`major`.`minor`\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3944,"byte_end":3962,"line_start":131,"line_end":131,"column_start":12,"column_end":30},"name":"emit_rustc_version","qualname":"<AutoCfg>::emit_rustc_version","value":"fn (&self, major: usize, minor: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\n if the current `rustc` is at least that version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5382,"byte_end":5392,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"probe_path","qualname":"<AutoCfg>::probe_path","value":"fn (&self, path: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given path can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5701,"byte_end":5714,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"emit_has_path","qualname":"<AutoCfg>::emit_has_path","value":"fn (&self, path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_PATH` if `probe_path` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5917,"byte_end":5930,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"emit_path_cfg","qualname":"<AutoCfg>::emit_path_cfg","value":"fn (&self, path: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_path` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6258,"byte_end":6269,"line_start":205,"line_end":205,"column_start":12,"column_end":23},"name":"probe_trait","qualname":"<AutoCfg>::probe_trait","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given trait can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6620,"byte_end":6634,"line_start":214,"line_end":214,"column_start":12,"column_end":26},"name":"emit_has_trait","qualname":"<AutoCfg>::emit_has_trait","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TRAIT` if `probe_trait` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6839,"byte_end":6853,"line_start":221,"line_end":221,"column_start":12,"column_end":26},"name":"emit_trait_cfg","qualname":"<AutoCfg>::emit_trait_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_trait` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7170,"byte_end":7180,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"probe_type","qualname":"<AutoCfg>::probe_type","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given type can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7516,"byte_end":7529,"line_start":243,"line_end":243,"column_start":12,"column_end":25},"name":"emit_has_type","qualname":"<AutoCfg>::emit_has_type","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TYPE` if `probe_type` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7732,"byte_end":7745,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"emit_type_cfg","qualname":"<AutoCfg>::emit_type_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_type` returns true.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":8228,"byte_end":8233,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":8596,"byte_end":8601,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,118,101,114,115,105,111,110,46,114,115],"byte_start":9727,"byte_end":9734,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2000,"byte_end":2007,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":8228,"byte_end":8233,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":122},"to":{"krate":1,"index":2464}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":8596,"byte_end":8601,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":122},"to":{"krate":2,"index":8138}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,118,101,114,115,105,111,110,46,114,115],"byte_start":9727,"byte_end":9734,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,102,111,117,114,110,105,101,114,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2000,"byte_end":2007,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}}]}